// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2019 15:16:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplexador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplexador_vlg_sample_tst(
	ctrl,
	desliga,
	SMult,
	x0,
	x1,
	sampler_tx
);
input [1:0] ctrl;
input  desliga;
input [2:0] SMult;
input [3:0] x0;
input [3:0] x1;
output sampler_tx;

reg sample;
time current_time;
always @(ctrl or desliga or SMult or x0 or x1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplexador_vlg_check_tst (
	CoLed,
	y,
	ySoma_aux,
	sampler_rx
);
input  CoLed;
input [6:0] y;
input [3:0] ySoma_aux;
input sampler_rx;

reg  CoLed_expected;
reg [6:0] y_expected;
reg [3:0] ySoma_aux_expected;

reg  CoLed_prev;
reg [6:0] y_prev;
reg [3:0] ySoma_aux_prev;

reg  CoLed_expected_prev;
reg [6:0] y_expected_prev;
reg [3:0] ySoma_aux_expected_prev;

reg  last_CoLed_exp;
reg [6:0] last_y_exp;
reg [3:0] last_ySoma_aux_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	CoLed_prev = CoLed;
	y_prev = y;
	ySoma_aux_prev = ySoma_aux;
end

// update expected /o prevs

always @(trigger)
begin
	CoLed_expected_prev = CoLed_expected;
	y_expected_prev = y_expected;
	ySoma_aux_expected_prev = ySoma_aux_expected;
end



// expected CoLed
initial
begin
	CoLed_expected = 1'bX;
end 
// expected y[ 6 ]
initial
begin
	y_expected[6] = 1'bX;
end 
// expected y[ 5 ]
initial
begin
	y_expected[5] = 1'bX;
end 
// expected y[ 4 ]
initial
begin
	y_expected[4] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// expected ySoma_aux[ 3 ]
initial
begin
	ySoma_aux_expected[3] = 1'bX;
end 
// expected ySoma_aux[ 2 ]
initial
begin
	ySoma_aux_expected[2] = 1'bX;
end 
// expected ySoma_aux[ 1 ]
initial
begin
	ySoma_aux_expected[1] = 1'bX;
end 
// expected ySoma_aux[ 0 ]
initial
begin
	ySoma_aux_expected[0] = 1'bX;
end 
// generate trigger
always @(CoLed_expected or CoLed or y_expected or y or ySoma_aux_expected or ySoma_aux)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CoLed = %b | expected y = %b | expected ySoma_aux = %b | ",CoLed_expected_prev,y_expected_prev,ySoma_aux_expected_prev);
	$display("| real CoLed = %b | real y = %b | real ySoma_aux = %b | ",CoLed_prev,y_prev,ySoma_aux_prev);
`endif
	if (
		( CoLed_expected_prev !== 1'bx ) && ( CoLed_prev !== CoLed_expected_prev )
		&& ((CoLed_expected_prev !== last_CoLed_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CoLed :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CoLed_expected_prev);
		$display ("     Real value = %b", CoLed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CoLed_exp = CoLed_expected_prev;
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( y_expected_prev[4] !== 1'bx ) && ( y_prev[4] !== y_expected_prev[4] )
		&& ((y_expected_prev[4] !== last_y_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[4] = y_expected_prev[4];
	end
	if (
		( y_expected_prev[5] !== 1'bx ) && ( y_prev[5] !== y_expected_prev[5] )
		&& ((y_expected_prev[5] !== last_y_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[5] = y_expected_prev[5];
	end
	if (
		( y_expected_prev[6] !== 1'bx ) && ( y_prev[6] !== y_expected_prev[6] )
		&& ((y_expected_prev[6] !== last_y_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y_exp[6] = y_expected_prev[6];
	end
	if (
		( ySoma_aux_expected_prev[0] !== 1'bx ) && ( ySoma_aux_prev[0] !== ySoma_aux_expected_prev[0] )
		&& ((ySoma_aux_expected_prev[0] !== last_ySoma_aux_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ySoma_aux[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ySoma_aux_expected_prev);
		$display ("     Real value = %b", ySoma_aux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ySoma_aux_exp[0] = ySoma_aux_expected_prev[0];
	end
	if (
		( ySoma_aux_expected_prev[1] !== 1'bx ) && ( ySoma_aux_prev[1] !== ySoma_aux_expected_prev[1] )
		&& ((ySoma_aux_expected_prev[1] !== last_ySoma_aux_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ySoma_aux[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ySoma_aux_expected_prev);
		$display ("     Real value = %b", ySoma_aux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ySoma_aux_exp[1] = ySoma_aux_expected_prev[1];
	end
	if (
		( ySoma_aux_expected_prev[2] !== 1'bx ) && ( ySoma_aux_prev[2] !== ySoma_aux_expected_prev[2] )
		&& ((ySoma_aux_expected_prev[2] !== last_ySoma_aux_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ySoma_aux[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ySoma_aux_expected_prev);
		$display ("     Real value = %b", ySoma_aux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ySoma_aux_exp[2] = ySoma_aux_expected_prev[2];
	end
	if (
		( ySoma_aux_expected_prev[3] !== 1'bx ) && ( ySoma_aux_prev[3] !== ySoma_aux_expected_prev[3] )
		&& ((ySoma_aux_expected_prev[3] !== last_ySoma_aux_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ySoma_aux[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ySoma_aux_expected_prev);
		$display ("     Real value = %b", ySoma_aux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ySoma_aux_exp[3] = ySoma_aux_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplexador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] ctrl;
reg desliga;
reg [2:0] SMult;
reg [3:0] x0;
reg [3:0] x1;
// wires                                               
wire CoLed;
wire [6:0] y;
wire [3:0] ySoma_aux;

wire sampler;                             

// assign statements (if any)                          
multiplexador i1 (
// port map - connection between master ports and signals/registers   
	.CoLed(CoLed),
	.ctrl(ctrl),
	.desliga(desliga),
	.SMult(SMult),
	.x0(x0),
	.x1(x1),
	.y(y),
	.ySoma_aux(ySoma_aux)
);
// ctrl[ 1 ]
initial
begin
	ctrl[1] = 1'b0;
end 
// ctrl[ 0 ]
initial
begin
	ctrl[0] = 1'b0;
end 

// desliga
initial
begin
	desliga = 1'b0;
end 
// SMult[ 2 ]
initial
begin
	SMult[2] = 1'b0;
end 
// SMult[ 1 ]
initial
begin
	SMult[1] = 1'b0;
end 
// SMult[ 0 ]
initial
begin
	SMult[0] = 1'b1;
end 
// x0[ 3 ]
initial
begin
	x0[3] = 1'b1;
	x0[3] = #150000 1'b0;
	x0[3] = #100000 1'b1;
	x0[3] = #100000 1'b0;
	x0[3] = #50000 1'b1;
	x0[3] = #50000 1'b0;
	x0[3] = #50000 1'b1;
	x0[3] = #150000 1'b0;
	x0[3] = #50000 1'b1;
	x0[3] = #50000 1'b0;
	x0[3] = #50000 1'b1;
	x0[3] = #50000 1'b0;
	x0[3] = #50000 1'b1;
end 
// x0[ 2 ]
initial
begin
	x0[2] = 1'b1;
	x0[2] = #100000 1'b0;
	x0[2] = #100000 1'b1;
	x0[2] = #100000 1'b0;
	x0[2] = #150000 1'b1;
	x0[2] = #50000 1'b0;
	x0[2] = #100000 1'b1;
	x0[2] = #50000 1'b0;
	x0[2] = #100000 1'b1;
	x0[2] = #100000 1'b0;
	x0[2] = #100000 1'b1;
end 
// x0[ 1 ]
initial
begin
	x0[1] = 1'b0;
	x0[1] = #50000 1'b1;
	x0[1] = #50000 1'b0;
	x0[1] = #100000 1'b1;
	x0[1] = #300000 1'b0;
	x0[1] = #200000 1'b1;
	x0[1] = #50000 1'b0;
	x0[1] = #200000 1'b1;
end 
// x0[ 0 ]
initial
begin
	x0[0] = 1'b1;
	x0[0] = #50000 1'b0;
	x0[0] = #150000 1'b1;
	x0[0] = #50000 1'b0;
	x0[0] = #50000 1'b1;
	x0[0] = #200000 1'b0;
	x0[0] = #200000 1'b1;
	x0[0] = #100000 1'b0;
	x0[0] = #50000 1'b1;
	x0[0] = #50000 1'b0;
	x0[0] = #50000 1'b1;
end 
// x1[ 3 ]
initial
begin
	x1[3] = 1'b1;
	x1[3] = #50000 1'b0;
	x1[3] = #150000 1'b1;
	x1[3] = #50000 1'b0;
	x1[3] = #200000 1'b1;
	x1[3] = #150000 1'b0;
	x1[3] = #50000 1'b1;
	x1[3] = #250000 1'b0;
end 
// x1[ 2 ]
initial
begin
	x1[2] = 1'b1;
	x1[2] = #50000 1'b0;
	x1[2] = #100000 1'b1;
	x1[2] = #50000 1'b0;
	x1[2] = #150000 1'b1;
	x1[2] = #200000 1'b0;
	x1[2] = #100000 1'b1;
	x1[2] = #50000 1'b0;
	x1[2] = #100000 1'b1;
	x1[2] = #50000 1'b0;
	x1[2] = #50000 1'b1;
	x1[2] = #50000 1'b0;
end 
// x1[ 1 ]
initial
begin
	x1[1] = 1'b1;
	x1[1] = #50000 1'b0;
	x1[1] = #100000 1'b1;
	x1[1] = #100000 1'b0;
	x1[1] = #100000 1'b1;
	x1[1] = #200000 1'b0;
	x1[1] = #100000 1'b1;
	x1[1] = #100000 1'b0;
	x1[1] = #100000 1'b1;
end 
// x1[ 0 ]
initial
begin
	x1[0] = 1'b1;
	x1[0] = #50000 1'b0;
	x1[0] = #250000 1'b1;
	x1[0] = #50000 1'b0;
	x1[0] = #100000 1'b1;
	x1[0] = #150000 1'b0;
	x1[0] = #100000 1'b1;
	x1[0] = #50000 1'b0;
	x1[0] = #150000 1'b1;
	x1[0] = #50000 1'b0;
end 

multiplexador_vlg_sample_tst tb_sample (
	.ctrl(ctrl),
	.desliga(desliga),
	.SMult(SMult),
	.x0(x0),
	.x1(x1),
	.sampler_tx(sampler)
);

multiplexador_vlg_check_tst tb_out(
	.CoLed(CoLed),
	.y(y),
	.ySoma_aux(ySoma_aux),
	.sampler_rx(sampler)
);
endmodule

